"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3139],{4137:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),h=i,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||o;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4851:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=n(7462),i=n(3366),o=(n(7294),n(4137)),r=["components"],l={title:"Apache Pinot\u2122 0.11 - How do I see my indexes?",author:"Mark Needham",author_title:"Mark Needham",author_url:"https://www.linkedin.com/in/markhneedham/",author_image_url:"https://www.datocms-assets.com/75153/1661544338-mark-needham.png",description:"How you can work out which indexes are currently defined on a Pinot table",keywords:["Apache Pinot","Apache Pinot 0.11.0","Indexes"],tags:["Pinot","Data","Analytics","User-Facing Analytics","Indexes"]},s=void 0,d={permalink:"/blog/2022/11/08/Apache Pinot-How-do-I-see-my-indexes",editUrl:"https://github.com/apache/pinot-site/edit/dev/website/blog/2022-11-08-Apache Pinot-How-do-I-see-my-indexes.md",source:"@site/blog/2022-11-08-Apache Pinot-How-do-I-see-my-indexes.md",title:"Apache Pinot\u2122 0.11 - How do I see my indexes?",description:"How you can work out which indexes are currently defined on a Pinot table",date:"2022-11-08T00:00:00.000Z",formattedDate:"November 8, 2022",tags:[{label:"Pinot",permalink:"/blog/tags/pinot"},{label:"Data",permalink:"/blog/tags/data"},{label:"Analytics",permalink:"/blog/tags/analytics"},{label:"User-Facing Analytics",permalink:"/blog/tags/user-facing-analytics"},{label:"Indexes",permalink:"/blog/tags/indexes"}],readingTime:3.79,truncated:!1,prevItem:{title:"Apache Pinot\u2122 0.11 - Inserts from SQL",permalink:"/blog/2022/11/17/Apache Pinot-Inserts-from-SQL"},nextItem:{title:"GapFill Function For Time-Series Datasets In Pinot",permalink:"/blog/2022/08/02/GapFill-Function-For-Time-Series-Datasets-In-Pinot"}},p=[{value:"Spinning up Pinot",id:"spinning-up-pinot",children:[]},{value:"Indexing Config",id:"indexing-config",children:[]},{value:"Viewing Indexes",id:"viewing-indexes",children:[]},{value:"Adding an Index",id:"adding-an-index",children:[]},{value:"Summary",id:"summary",children:[]}],c={toc:p},u="wrapper";function h(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We recently released ",(0,o.kt)("a",{parentName:"p",href:"https://medium.com/apache-pinot-developer-blog/apache-pinot-0-11-released-d564684df5d4"},"Pinot 0.11.0")," , which has lots of goodies for you to play with. This is the first in a series of blog posts showing off some of the new features in this release."),(0,o.kt)("p",null,"A common question from the community is: how can you work out which indexes are currently defined on a Pinot table? This information has always been ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pinot.apache.org/users/api/pinot-rest-admin-interface"},"available via the REST API"),", but sometimes you simply want to see it on the UI and not have to parse your way through a bunch of JSON. Let's see how it works!"),(0,o.kt)("h2",{id:"spinning-up-pinot"},"Spinning up Pinot"),(0,o.kt)("p",null,"We\u2019re going to spin up the Batch ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pinot.apache.org/basics/getting-started/quick-start"},"QuickStart")," in Docker using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  -p 8000:8000 \\\n  -p 9000:9000 \\\n  apachepinot/pinot:0.11.0 \\\n  QuickStart -type BATCH\n")),(0,o.kt)("p",null,"Or if you\u2019re on a Mac M1, change the name of the image to have the arm-64 suffix, like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n  -p 8000:8000 \\\n  -p 9000:9000 \\\n  apachepinot/pinot:0.11.0-arm64 \\\n  QuickStart -type BATCH\n")),(0,o.kt)("p",null,"Once that\u2019s up and running, navigate to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:9000/#/"},"http://localhost:9000/#/")," and click on Tables. Under the tables section click on airlineStats","_","OFFLINE. You should see a page that looks like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://www.datocms-assets.com/75153/1667915561-image1-edittable.png",alt:"airlineStats_OFFLINE page",title:"airlineStats_OFFLINE page"})),(0,o.kt)("p",null,"Click on Edit Table. This will show a window with the config for this table."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://www.datocms-assets.com/75153/1667915654-image3.png",alt:"Window with configuration for airlineStats_OFFLINE table",title:"Window with configuration for airlineStats_OFFLINE table"})),(0,o.kt)("h2",{id:"indexing-config"},"Indexing Config"),(0,o.kt)("p",null,"We\u2019re interested in the tableIndexConfig and fieldConfigList sections. These sections are responsible for defining indexes, which are applied to a table on a per segment basis.\xa0"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"tableIndexConfig is responsible for inverted, JSON, range, Geospatial, and StarTree indexes."),(0,o.kt)("li",{parentName:"ul"},"fieldConfigList is responsible for timestamp and text indexes.")),(0,o.kt)("p",null,"tableIndexConfig is defined below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"tableIndexConfig": {\n  "rangeIndexVersion": 2,\n  "autoGeneratedInvertedIndex": false,\n  "createInvertedIndexDuringSegmentGeneration": false,\n  "loadMode": "MMAP",\n  "enableDefaultStarTree": false,\n  "enableDynamicStarTreeCreation": false,\n  "aggregateMetrics": false,\n  "nullHandlingEnabled": false,\n  "optimizeDictionaryForMetrics": false,\n  "noDictionarySizeRatioThreshold": 0\n},\n')),(0,o.kt)("p",null,"From reading this config we learn that no indexes have been explicitly defined."),(0,o.kt)("p",null,"Now for fieldConfigList, which is defined below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"fieldConfigList": [\n  {\n    "name": "ts",\n    "encodingType": "DICTIONARY",\n    "indexType": "TIMESTAMP",\n    "indexTypes": [\n      "TIMESTAMP"\n    ],\n    "timestampConfig": {\n      "granularities": [\n        "DAY",\n        "WEEK",\n        "MONTH"\n      ]\n    }\n  }\n],\n')),(0,o.kt)("p",null,"From reading this config we learn that a timestamp index is being applied to the ",(0,o.kt)("em",{parentName:"p"},"ts")," column. It is applied at DAY, WEEK, and MONTH granularities, which means that the derived columns $ts$DAY, $ts$WEEK, and $ts$MONTH will be created for the segments in this table."),(0,o.kt)("h2",{id:"viewing-indexes"},"Viewing Indexes"),(0,o.kt)("p",null,"Now, close the table config modal, and under the segments section, open airlineStats","_","OFFLINE","_","16071","_","16071","_","0 and airlineStats","_","OFFLINE","_","16073","_","16073","_","0 in new tabs."),(0,o.kt)("p",null,"If you look at one of those segments, you\u2019ll see the following grid that lists columns/field names against the indexes defined on those fields."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://www.datocms-assets.com/75153/1667915996-image7.png",alt:"Segment grid that lists columns/field names against the indexes defined on those fields",title:"Segment grid that lists columns/field names against the indexes defined on those fields"})),(0,o.kt)("p",null,"All the fields on display are persisting their values using the dictionary/forward ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pinot.apache.org/basics/indexing/forward-index"},"index format")," ). Still, we can also see that the Quarter column is sorted and has an inverted index, neither of which we explicitly defined."),(0,o.kt)("p",null,"This is because Pinot will automatically create sorted and inverted indexes for columns whose data is sorted when the segment is created.\xa0"),(0,o.kt)("p",null,"So the data for the Quarter column was sorted, and hence it has a sorted index."),(0,o.kt)("p",null,"I\u2019ve written a couple of blog posts explaining how sorted indexes work on offline and real-time tables:"),(0,o.kt)("h2",{id:"adding-an-index"},"Adding an Index"),(0,o.kt)("p",null,"Next, let\u2019s see what happens if we add an explicit index. We\u2019re going to add an inverted index to the FlightNum column. Go to Edit Table config again and update tableIndexConfig to have the following value:"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://www.datocms-assets.com/75153/1667916147-image6.png",alt:"Inverted index addition",title:"Inverted index addition"})),(0,o.kt)("p",null,"If you go back to the page for segment airlineStats","_","OFFLINE","_","16073","_","16073","_","0, notice that it does not have an inverted index for this field."),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://www.datocms-assets.com/75153/1667916232-image2.png",alt:"page for segment airlineStats_OFFLINE_16073_16073_0 without an inverted index",title:"page for segment airlineStats_OFFLINE_16073_16073_0 without an inverted index"})),(0,o.kt)("p",null,"This is because indexes are applied on a per segment basis. If we want the inverted index on the FlightNum column in this segment, we can click ",(0,o.kt)("em",{parentName:"p"},"Reload Segment")," on this page, or we can go back to the table page and click ",(0,o.kt)("em",{parentName:"p"},"Reload All Segments"),".\xa0"),(0,o.kt)("p",null,"If we do that, all the segments in the airlineStats","_","OFFLINE table will eventually have an inverted index on FlightNum."),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"As I mentioned in the introduction, information about the indexes on each segment has always been available via the REST API, but this feature democratizes that information.\xa0"),(0,o.kt)("p",null,"If you have any questions about this feature, feel free to join us on ",(0,o.kt)("a",{parentName:"p",href:"https://stree.ai/slack"},"Slack"),", where we\u2019ll be happy to help you out."))}h.isMDXComponent=!0}}]);